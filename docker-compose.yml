services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: node-app
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_JUTE_MAXBUFFER: 4194304 # 4 MB
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 30s
      timeout: 10s
      retries: 2
    depends_on:
      kafka:
        condition: service_healthy
      mysql:
        condition: service_healthy
      mongo:
        condition: service_started
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.8.0
    container_name: kafka-container
    platform: linux/amd64
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - app-network
    user: "appuser:appuser"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.8.0
    container_name: zookeeper-container
    platform: linux/amd64
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_MAX_CLIENT_CNXNS: 0
      ZOOKEEPER_ADMIN_ENABLE_SERVER: "false"
      KAFKA_OPTS: "-Djute.maxbuffer=8388608 -Xmx512M -Xms512M"
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - app-network

  debezium:
    image: debezium/connect:2.4
    container_name: debezium-container
    platform: linux/amd64
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_healthy
      mysql:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: "1"
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_REST_ADVERTISED_HOST_NAME: "localhost"
      CONNECT_REST_HOST_NAME: "0.0.0.0"
      CONNECT_REST_PORT: 8083
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      ADVERTISED_HOST_NAME: "0.0.0.0"
    volumes:
      - ./register-connectors.sh:/usr/local/bin/register-connectors.sh
      - ./connectors/mongodb-connector.json:/config/mongodb-connector.json
      - ./connectors/mysql-connector.json:/config/mysql-connector.json
      - kafka-logs:/var/log/kafka
    user: "root"
    entrypoint: [ "/bin/bash", "-c", "/usr/local/bin/register-connectors.sh" ]
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    container_name: mysql-container
    environment:
      MYSQL_ROOT_PASSWORD: test
      MYSQL_DATABASE: mysql_database
    ports:
      - "3306:3306"
    networks:
      - app-network
    volumes:
      - ./data/DATA.sql:/docker-entrypoint-initdb.d/DATA.sql
    command:
      --server-id=1
      --log-bin=mysql-bin
      --binlog-format=ROW
      --gtid-mode=ON
      --enforce-gtid-consistency=ON
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ptest"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  mongo:
    image: mongo:7.0
    container_name: mongo-container
    platform: linux/amd64
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: test
    ports:
      - "27017:27017"
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--quiet"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - app-network
    volumes:
      - ./mongo-keyfile:/etc/mongo-keyfile
      - ./data/DATA.js:/docker-entrypoint-initdb.d/DATA.js
      - mongo-data:/data/db

volumes:
  mongo-data:
  kafka-data:
    driver: local
  zookeeper-data:
  zookeeper-logs:
  kafka-logs:

networks:
  app-network:
    driver: bridge
