services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: node-app
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 30s
      timeout: 10s
      retries: 2
    depends_on:
      kafka:
        condition: service_healthy
      mysql:
        condition: service_healthy
      mongo:
        condition: service_started
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka-container
    platform: linux/amd64
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    depends_on:
      - zookeeper
    healthcheck:
     test: [ "CMD-SHELL", "kafka-topics --list --bootstrap-server localhost:9092 || exit 1" ]
     interval: 30s
     timeout: 10s
     retries: 5
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper-container
    platform: linux/amd64
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
     test: [ "CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok || exit 1" ]
     interval: 10s
     timeout: 5s
     retries: 3
    networks:
      - app-network

  debezium:
    image: quay.io/debezium/connect:1.9
    container_name: debezium-container
    platform: linux/amd64
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
    depends_on:
      - kafka
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    container_name: mysql-container
    environment:
      MYSQL_ROOT_PASSWORD: test
      MYSQL_DATABASE: mysql_database
    ports:
      - "3306:3306"
    networks:
      - app-network
    volumes:
      - ./data/DATA.sql:/docker-entrypoint-initdb.d/DATA.sql
    command:
      --server-id=1
      --log-bin=mysql-bin
      --binlog-format=ROW
      --gtid-mode=ON
      --enforce-gtid-consistency=ON
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 2

  mongo:
    image: mongo
    container_name: mongo-container
    ports:
      - "27017:27017"
    networks:
      - app-network
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: test
      MONGO_INITDB_DATABASE: mongo_database
    command: [ "mongod", "--replSet", "rs0", "--bind_ip_all", "--keyFile", "/etc/mongo-keyfile" ]
    volumes:
      - ./mongo-keyfile:/etc/mongo-keyfile
      - ./data/DATA.js:/docker-entrypoint-initdb.d/DATA.js
      - mongo-data:/data/db

volumes:
  mongo-data:

networks:
  app-network:
    driver: bridge
